Your task is to first understand the user query and carry out the plan to generate a structured specification of the user's intended scientific workflow step by step.
The output, a structured specification of the intended workflow, must be in a strict JSON format:
{
    "Title": title,
    "Inputs": {"I1": input1, "I2": input2, "I3": ...}
    "Outputs": {"O1": output1, "O2": output2, "O3": ...}
    "Activities": {"A1": activity1, "A2": activity2, "A3": ...}
}
Hint: Every input, output and activity should not be longer than 5 words.

Here are some examples of the user query along with its corresponding plan and structured specification of the intended scientific workflow:
##1
-User Query:
{This workflow retrieves a fasta sequence or blast report from an id. Firstly, given some inputs (e.g. ids:EDL10223.1, format:fasta, style:default and db:emblcds), it returns the sequence in fasta format associated to those inputs using the EBI's WSDbfetch web service (see http://www.ebi.ac.uk/Tools/webservices/services/dbfetch).
Next, we obtain a Blast report from this fasta sequence and some others parameters. The final result in that case corresponds with the same fasta sequence introduced as input parameter to the "run" processor. However, it could retrieve the blast report in XML format by changing BeanShell "process_ResultTypes"   condition from the value "sequence" to "xml".}
Let's think step by step.
-Plan：
1. Input the parameters: ids, db, style, format, title, email.
2.Use the EBI's WSDbfetch web service to retrieve the fasta sequence associated with the input parameters.
3.Run a Blast report using the retrieved fasta sequence and other parameters.
4.If the desired output is the fasta sequence, return the same fasta sequence introduced as input parameter to the "run" processor.
5.If the desired output is the Blast report in XML format, change the BeanShell "process_ResultTypes" condition from the value "sequence" to "xml" and retrieve the Blast report in XML format.
6.Output the desired result to the user.
-Structured Specification:
{
    "Title": "Blast report from ID",
    "Inputs": {"I1": “ids”, "I2": "db", "I3": "style", "I4": "format", "I5": "title", "I6": "email"},
    "Outputs": {"O1": "result", "O2": "job_status"},
    "Activities": {"A1": "fetchBatch", "A2": "seqrange_value", "A3": "Merge_List_to_String", "A4": "program", "A5": "stype", "A6": "database", "A7": "run_input_2", "A8": "run_input", "A9": "run", "A10": "run_output", "A11": "Status_Check", "A12": "getResultTypes_input", "A13": "getResultTypes", "A14": "getResultTypes_output", "A15": "process_ResultTypes", "A16": "getResult_input", "A17": "getResult", "A18": "getResult_output" }
}

#2
{This workflow will extract the plain text content of PDF files supplied to the input port.  You can connect the Load PDF from directory workflow to this workflows input. We recommend you send the output from this workflow to the Clean plain text workflow, because the PDF to text process can add characters into the text that are XML-invalid and therefore can not be sent to most services as plain text.  Another way round this problem is to encode the text as Base64 using the handy local service ("Encode Byte Array to Base 64") included with Taverna, although this requires a service that knows to decode the Base 64 back to text, which is not common. The PDF to text service makes use of the "pdftotext" executable from Xpdf.}
Let's think step by step.
-Plan:
1. Input the PDF files.
2. Use the "Encode Byte Array to Base 64" local service to encode the text as Base64.
3. Use the "PDF to text" service to extract the plain text content of the PDF files.
4. Output the TEXT files.
-Structured Specification:
{
    "Title": "PDF to plain text",
    "Inputs": {"I1": "pdfFileContentsIn"},
    "Outputs": {"O1": "textFileContentsOut"},
    "Activities": {"A1": "pdfToText", "A2": "pdfToText_input", "A3": "pdfToText_output", "A4": "Encode_Byte_Array_to_Base_64" }
}

##3
-User Query:
{Given a structure or structure entry identifer (e.g. PDB:1crn), return the structure in PDB format.
If a structure identifier, in database:identifier format, is input the EBI's WSDbfetch web service (see http://www.ebi.ac.uk/Tools/webservices/services/dbfetch) is used to retrive the structure in PDB format. Otherwise the input is assumed to be a formated structure and is passed through to the output.}
Let's think step by step.
-Plan:
1. Input the structure or structure entry identifier.
2. Check if the input is in the format database:identifier.
3. If the input is in the format database:identifier, use the EBI's WSDbfetch web service to retrieve the structure in PDB format.
4. If the input is not in the format database:identifier, assume it is a formatted structure and pass it through to the output.
5. Output the structure in PDB format.
-Structured Specification:
{
    "Title": "Structure_or_ID",
    "Inputs": {"I1": "Structure_or_ID"},
    "Outputs": {"O1": "Structure"},
    "Activities": {"A1": "Is_structure", "A2": "Fail_if_identifer", "A3": "Fail_if_structure", "A4": "Use_structure", "A5": "fetchData" }
}

##4
-User Query:
{Perform a ClustalW2 alignment of protein sequences using the EMBL-EBIâ€™s ClustalW2 (SOAP) service (see http://www.ebi.ac.uk/Tools/webservices/services/msa/clustalw2_soap). This workflow uses the new EBI services, which are asynchronous and require looping over the nested workflow (Status) until the workflow has finished. Many of the EBI services now work in this way, so you can use this workflow as an example of the invocation pattern and looping configuration.}
Let's think step by step.
-Plan:
1. Input the protein sequences.
2. Use the EMBL-EBI's ClustalW2 (SOAP) service to perform a ClustalW2 alignment of the protein sequences.
3. Loop over the nested workflow (Status) until the alignment process is finished.
4. Output the aligned protein sequences.
-Structured Specification:
{
    "Title": "EMBL-EBI ClustalW2_SOAP",
    "Inputs": {"I1": "Email_address", "I2": "Sequences"},
    "Outputs": {"O1": "ClustalW_alignment", "O2": "ClustalW_guide_tree", "O3": "ClustalW_output", "O4": "clustalwStatus"},
    "Activities": {"A1": "run_input_2", "A2": "run_input", "A3": "run", "A4": "run_output", "A5": "status", "A6": "out", "A7": "tree", "A8": "aln", "A9": "getResult_input", "A10": "getResult_tree_input", "A11": "getResult_align_input", "A12": "getResult", "A13": "getResult_guideTree", "A14": "getResult_alignment", "A15": "getResult_output", "A16": "getResult_tree_output", "A17": "getResult_align_output" }
}

-User Query:
{!!!}
Let's think step by step.
-Plan:
###
-Structured Specification:


